{"version":3,"sources":["../../../../src/lib/rest/ApiRequest.ts","../../../../src/lib/rest/HypixelAPIError.ts","../../../../src/lib/rest/RequestManager.ts","../../../../src/lib/errors/HypixelTSError.ts","../../../../src/lib/errors/Messages.ts"],"sourcesContent":["import { RequestManager, HypixelAPIError, type HypixelAPIErrorResponse } from './index';\r\nimport { HypixelTSError } from '../errors/index';\r\n\r\n/**\r\n * The options supplied to the request\r\n * @category Rest\r\n * @group Rest\r\n */\r\nexport interface ApiRequestOptions {\r\n\t/**\r\n\t * The request path/endpoint\r\n\t */\r\n\tpath: string;\r\n\r\n\t/**\r\n\t * The request method, only `GET` is supported\r\n\t */\r\n\tmethod?: 'GET';\r\n\r\n\t/**\r\n\t * Whether to send the API key for this request\r\n\t */\r\n\tsendAPIKey?: boolean;\r\n}\r\n\r\n/**\r\n * Handles (sending/building options) requests\r\n * @category Rest\r\n * @group Rest\r\n */\r\nexport class ApiRequest {\r\n\t/**\r\n\t * The request manager instance\r\n\t */\r\n\tpublic requests: RequestManager;\r\n\r\n\t/**\r\n\t * The options of this request\r\n\t */\r\n\tpublic options: ApiRequestOptions;\r\n\r\n\tpublic constructor(requestManager: RequestManager, options: ApiRequestOptions) {\r\n\t\tthis.requests = requestManager;\r\n\t\tthis.options = options;\r\n\t}\r\n\r\n\t/**\r\n\t * Makes a request with the options provided.\r\n\t */\r\n\tpublic async make() {\r\n\t\tconst options = this.buildOptions();\r\n\r\n\t\tconst res = await fetch(options.url, {\r\n\t\t\t...options\r\n\t\t});\r\n\r\n\t\tif (!res.ok) {\r\n\t\t\tconst error = (await res.json()) as HypixelAPIErrorResponse;\r\n\t\t\tthrow new HypixelAPIError(error?.cause ?? res.statusText, res.status);\r\n\t\t}\r\n\r\n\t\treturn res;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates an object containing the options to be passed to the request\r\n\t */\r\n\tpublic buildOptions() {\r\n\t\tconst apiKey = this.requests.client.options?.apiKey;\r\n\r\n\t\tconst headers: Record<string, string> = {\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t};\r\n\r\n\t\tif (this.options.sendAPIKey) {\r\n\t\t\tif (!apiKey) throw new HypixelTSError('CLIENT_OPTIONS_MISSING', 'apiKey');\r\n\t\t\theaders['API-Key'] = apiKey;\r\n\t\t}\r\n\r\n\t\tconst options = {\r\n\t\t\turl: `${this.requests.baseApiUrl}${this.options.path}`,\r\n\t\t\tmethod: this.options.method ?? 'GET',\r\n\t\t\theaders\r\n\t\t};\r\n\r\n\t\treturn options;\r\n\t}\r\n}\r\n","/**\r\n * Response body when an error is returned by the hypixel api\r\n * @category Rest\r\n * @group Rest\r\n */\r\nexport interface HypixelAPIErrorResponse {\r\n\t/**\r\n\t * Whether or not the request is successful\r\n\t */\r\n\tsuccess: boolean;\r\n\r\n\t/**\r\n\t * The message explaining the error\r\n\t */\r\n\tcause: string;\r\n}\r\n\r\n/**\r\n * Error thrown when an error is encountered while querying the hypixel API\r\n * @category Rest\r\n * @group Rest\r\n */\r\nexport class HypixelAPIError extends Error {\r\n\tpublic code: number;\r\n\r\n\tpublic constructor(message: string, code: number) {\r\n\t\tsuper(message);\r\n\t\tthis.message = message;\r\n\t\tthis.code = code;\r\n\t}\r\n}\r\n","import { AsyncQueue } from '@sapphire/async-queue';\r\nimport { ApiRequest } from './ApiRequest';\r\nimport { Client } from '../Client';\r\n\r\n/**\r\n * Manages the requests to the API\r\n * @category Rest\r\n * @group Rest\r\n */\r\nexport class RequestManager {\r\n\t/**\r\n\t * The hypixel.ts client instance\r\n\t */\r\n\tpublic client: Client;\r\n\r\n\t/**\r\n\t * The base url of the hypixel API\r\n\t */\r\n\tpublic baseApiUrl: string;\r\n\r\n\t/**\r\n\t * Queue for requests\r\n\t * @see {@link https://npmjs.com/@sapphire/async-queue}\r\n\t */\r\n\tprivate queue: AsyncQueue;\r\n\r\n\tpublic constructor(client: Client) {\r\n\t\tthis.client = client;\r\n\t\tthis.baseApiUrl = client.options?.baseApiUrl ?? 'https://api.hypixel.net';\r\n\t\tthis.queue = new AsyncQueue();\r\n\t}\r\n\r\n\t/**\r\n\t * Makes the api request and pushes it to the request queue\r\n\t * @param path The path/endpoint to make the request to\r\n\t * @param sendAPIKey Whether or not to send the apiKey with this request\r\n\t */\r\n\tpublic async execute<T>(path: string, sendAPIKey: boolean) {\r\n\t\tawait this.queue.wait();\r\n\t\ttry {\r\n\t\t\tconst request = await new ApiRequest(this, { path, sendAPIKey }).make();\r\n\t\t\treturn request.json() as T;\r\n\t\t} finally {\r\n\t\t\tthis.queue.shift();\r\n\t\t}\r\n\t}\r\n}\r\n","type ErrorMessageSupplier = (...args: any[]) => string;\r\n\r\nconst messages = new Map<string, string | ErrorMessageSupplier>();\r\n\r\nexport class HypixelTSError extends Error {\r\n\tpublic constructor(key: string, ...args: any[]) {\r\n\t\tsuper(getMessage(key, args));\r\n\r\n\t\tfunction getMessage(key: string, args: any[]) {\r\n\t\t\tif (typeof key !== 'string') throw new Error('[getMessage]: argument key must be a string');\r\n\t\t\tconst msg = messages.get(key);\r\n\r\n\t\t\tif (!msg) throw new Error(`[getMessage]: An invalid error key was provided: ${key}`);\r\n\t\t\tif (typeof msg === 'function') return msg(...args);\r\n\t\t\tif (!args.length) return msg;\r\n\r\n\t\t\targs.unshift(msg);\r\n\t\t\treturn String(...args);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport function register(name: string, value: any) {\r\n\tmessages.set(name, typeof value === 'function' ? value : String(value));\r\n}\r\n","import { register } from './HypixelTSError';\r\n\r\nconst messages = {\r\n\tCLIENT_OPTIONS_MISSING: (option?: string) => `ClientOptions${option ? `.${option}` : ''} ${option ? 'is' : 'are'} missing`,\r\n\tCLIENT_OPTION_INVALID_TYPE: (option: string, type: string, received?: string) =>\r\n\t\t`ClientOption.${option} is expected to be of type \"${type}\", received \"${received}\"`,\r\n\tGET_UUID_ERROR: (error: string, code: number) => `Util.getUUID: Failed with error ${error}, status code ${code}`,\r\n\tGET_UUID_404: `Util.getUUID: Player not found`,\r\n\tGET_USERNAME_ERROR: (error: string, code: number) => `Util.getUsername: Failed with error ${error}, status code ${code}`,\r\n\tGET_USERNAME_404: `Util.getUsername: Player not found`,\r\n\tNOT_UUID: `The supplied string was not of the correct format for a UUID`,\r\n\tMETHOD_MISSING_OPTION: (manager: string, method: string, option: string) => `${manager}.${method}: Required option \"${option}\" is missing`,\r\n\tMETHOD_INVALID_OPTIONS: (manager: string, method: string, option: string, expected: string[]) =>\r\n\t\t`${manager}.${method}: Invalid options provided. Expected type \"${\r\n\t\t\texpected?.length > 1 ? `either ${expected.join(', ')}` : expected.join(', ')\r\n\t\t}\" for the \"${option}\" option`\r\n};\r\n\r\nfor (const [key, value] of Object.entries(messages)) register(key, value);\r\n"],"mappings":"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","names":["key","args","messages"]}