{"version":3,"sources":["../../../../src/lib/errors/index.ts","../../../../src/lib/errors/HypixelTSError.ts","../../../../src/lib/errors/Messages.ts"],"sourcesContent":["export * from './HypixelTSError';\r\nexport * from './Messages';\r\n","type ErrorMessageSupplier = (...args: any[]) => string;\r\n\r\nconst messages = new Map<string, string | ErrorMessageSupplier>();\r\n\r\nexport class HypixelTSError extends Error {\r\n\tpublic constructor(key: string, ...args: any[]) {\r\n\t\tsuper(getMessage(key, args));\r\n\r\n\t\tfunction getMessage(key: string, args: any[]) {\r\n\t\t\tif (typeof key !== 'string') throw new Error('[getMessage]: argument key must be a string');\r\n\t\t\tconst msg = messages.get(key);\r\n\r\n\t\t\tif (!msg) throw new Error(`[getMessage]: An invalid error key was provided: ${key}`);\r\n\t\t\tif (typeof msg === 'function') return msg(...args);\r\n\t\t\tif (!args.length) return msg;\r\n\r\n\t\t\targs.unshift(msg);\r\n\t\t\treturn String(...args);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport function register(name: string, value: any) {\r\n\tmessages.set(name, typeof value === 'function' ? value : String(value));\r\n}\r\n","import { register } from './HypixelTSError';\r\n\r\nconst messages = {\r\n\tCLIENT_OPTIONS_MISSING: (option?: string) => `ClientOptions${option ? `.${option}` : ''} ${option ? 'is' : 'are'} missing`,\r\n\tCLIENT_OPTION_INVALID_TYPE: (option: string, type: string, received?: string) =>\r\n\t\t`ClientOption.${option} is expected to be of type \"${type}\", received \"${received}\"`,\r\n\tGET_UUID_ERROR: (error: string, code: number) => `Util.getUUID: Failed with error ${error}, status code ${code}`,\r\n\tGET_UUID_404: `Util.getUUID: Player not found`,\r\n\tGET_USERNAME_ERROR: (error: string, code: number) => `Util.getUsername: Failed with error ${error}, status code ${code}`,\r\n\tGET_USERNAME_404: `Util.getUsername: Player not found`,\r\n\tNOT_UUID: `The supplied string was not of the correct format for a UUID`,\r\n\tMETHOD_MISSING_OPTION: (manager: string, method: string, option: string) => `${manager}.${method}: Required option \"${option}\" is missing`,\r\n\tMETHOD_INVALID_OPTIONS: (manager: string, method: string, option: string, expected: string[]) =>\r\n\t\t`${manager}.${method}: Invalid options provided. Expected type \"${\r\n\t\t\texpected?.length > 1 ? `either ${expected.join(', ')}` : expected.join(', ')\r\n\t\t}\" for the \"${option}\" option`\r\n};\r\n\r\nfor (const [key, value] of Object.entries(messages)) register(key, value);\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACEA,IAAM,WAAW,oBAAI,IAA2C;AAEzD,IAAM,iBAAN,cAA6B,MAAM;AAAA,EAJ1C,OAI0C;AAAA;AAAA;AAAA,EAClC,YAAY,QAAgB,MAAa;AAC/C,UAAM,WAAW,KAAK,IAAI,CAAC;AAE3B,aAAS,WAAWA,MAAaC,OAAa;AAC7C,UAAI,OAAOD,SAAQ;AAAU,cAAM,IAAI,MAAM,6CAA6C;AAC1F,YAAM,MAAM,SAAS,IAAIA,IAAG;AAE5B,UAAI,CAAC;AAAK,cAAM,IAAI,MAAM,oDAAoDA,IAAG,EAAE;AACnF,UAAI,OAAO,QAAQ;AAAY,eAAO,IAAI,GAAGC,KAAI;AACjD,UAAI,CAACA,MAAK;AAAQ,eAAO;AAEzB,MAAAA,MAAK,QAAQ,GAAG;AAChB,aAAO,OAAO,GAAGA,KAAI;AAAA,IACtB;AAVS;AAAA,EAWV;AACD;AAEO,SAAS,SAAS,MAAc,OAAY;AAClD,WAAS,IAAI,MAAM,OAAO,UAAU,aAAa,QAAQ,OAAO,KAAK,CAAC;AACvE;AAFgB;;;ACpBhB,IAAMC,YAAW;AAAA,EAChB,wBAAwB,CAAC,WAAoB,gBAAgB,SAAS,IAAI,MAAM,KAAK,EAAE,IAAI,SAAS,OAAO,KAAK;AAAA,EAChH,4BAA4B,CAAC,QAAgB,MAAc,aAC1D,gBAAgB,MAAM,+BAA+B,IAAI,gBAAgB,QAAQ;AAAA,EAClF,gBAAgB,CAAC,OAAe,SAAiB,mCAAmC,KAAK,iBAAiB,IAAI;AAAA,EAC9G,cAAc;AAAA,EACd,oBAAoB,CAAC,OAAe,SAAiB,uCAAuC,KAAK,iBAAiB,IAAI;AAAA,EACtH,kBAAkB;AAAA,EAClB,UAAU;AAAA,EACV,uBAAuB,CAAC,SAAiB,QAAgB,WAAmB,GAAG,OAAO,IAAI,MAAM,sBAAsB,MAAM;AAAA,EAC5H,wBAAwB,CAAC,SAAiB,QAAgB,QAAgB,aACzE,GAAG,OAAO,IAAI,MAAM,8CACnB,UAAU,SAAS,IAAI,UAAU,SAAS,KAAK,IAAI,CAAC,KAAK,SAAS,KAAK,IAAI,CAC5E,cAAc,MAAM;AACtB;AAEA,WAAW,CAAC,KAAK,KAAK,KAAK,OAAO,QAAQA,SAAQ;AAAG,WAAS,KAAK,KAAK;","names":["key","args","messages"]}