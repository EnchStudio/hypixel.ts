{"version":3,"sources":["../../../../src/lib/managers/PlayerManager.ts","../../../../src/lib/managers/BaseManager.ts","../../../../src/lib/classes/Base.ts","../../../../src/lib/classes/Player.ts","../../../../src/lib/errors/HypixelTSError.ts","../../../../src/lib/classes/Util.ts","../../../../src/lib/errors/Messages.ts"],"sourcesContent":["import { BaseManager } from './BaseManager';\r\nimport { Client } from '../Client';\r\nimport { Player, Util } from '../classes/index';\r\nimport { HypixelTSError } from '../errors/index';\r\nimport type { APIPlayer, GetRecentlyPlayedGamesResponse, GetStatusResponse } from '../typings';\r\n\r\n/**\r\n * Player related endpoints.\r\n * @category Managers\r\n * @group Managers\r\n */\r\nexport class PlayerManager extends BaseManager {\r\n\tpublic constructor(client: Client) {\r\n\t\tsuper(client, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Fetch a player using their username or uuid\r\n\t * @param identifier The username/uuid of the player\r\n\t */\r\n\tpublic async fetch(identifier: string) {\r\n\t\tif (!identifier) throw new HypixelTSError('METHOD_MISSING_OPTION', 'PlayerManager', 'fetch', 'identifier');\r\n\r\n\t\tconst uuid = await this.getUUID(identifier);\r\n\t\tconst { player } = await this.makeGetRequest<{ player: APIPlayer }>(`/player?uuid=${uuid}`);\r\n\t\treturn new Player(this.client, player);\r\n\t}\r\n\r\n\t/**\r\n\t * Fetch the recently played games of a player\r\n\t * @param identifier The username/uuid of the player\r\n\t */\r\n\tpublic async getRecentlyPlayedGames(identifier: string) {\r\n\t\tif (!identifier) throw new HypixelTSError('METHOD_MISSING_OPTION', 'PlayerManager', 'getRecentlyPlayedGames', 'identifier');\r\n\r\n\t\tconst uuid = await this.getUUID(identifier);\r\n\t\tconst { games } = await this.makeGetRequest<{ games: GetRecentlyPlayedGamesResponse[] }>(`/recentgames?uuid=${uuid}`);\r\n\t\treturn games;\r\n\t}\r\n\r\n\t/**\r\n\t * Fetch the status of a player\r\n\t * @param identifier The username/uuid of the player\r\n\t */\r\n\tpublic async getStatus(identifier: string) {\r\n\t\tif (!identifier) throw new HypixelTSError('METHOD_MISSING_OPTION', 'PlayerManager', 'getStatus', 'identifier');\r\n\r\n\t\tconst uuid = await this.getUUID(identifier);\r\n\t\tconst { session } = await this.makeGetRequest<{ session: GetStatusResponse }>(`/status?uuid=${uuid}`);\r\n\t\treturn session;\r\n\t}\r\n\r\n\t/**\r\n\t * Resolves the username to a uuid for use in requests\r\n\t * @param identifier The username (or uuid) of the player\r\n\t */\r\n\tprivate async getUUID(identifier: string) {\r\n\t\tconst isUUID = Util.isUUID(identifier);\r\n\r\n\t\tif (!isUUID) {\r\n\t\t\tconst uuid = await Util.getUUID(identifier);\r\n\t\t\treturn uuid;\r\n\t\t}\r\n\r\n\t\treturn identifier;\r\n\t}\r\n}\r\n","import type { Client } from '../Client';\r\n\r\n/**\r\n * The base manager which all other managers extend from\r\n * @category Managers\r\n * @group Managers\r\n */\r\nexport class BaseManager {\r\n\t/**\r\n\t * Whether or not the manager requires API key authorization.\r\n\t */\r\n\tprotected requiresAuth: boolean;\r\n\r\n\t/**\r\n\t * The instantiated hypixel.ts client\r\n\t */\r\n\tprotected client: Client;\r\n\r\n\tpublic constructor(client: Client, requiresAuth: boolean) {\r\n\t\tthis.client = client;\r\n\t\tthis.requiresAuth = requiresAuth;\r\n\t}\r\n\r\n\t/**\r\n\t * Calls the request manager to create (and execute) requests to the API.\r\n\t *\r\n\t * **NOTE**: Do not directly use this method unless you know what you are doing. Consider using the methods provided in the managers.\r\n\t * @param path The path/endpoint of the request\r\n\t * @private\r\n\t */\r\n\tprotected async makeGetRequest<T>(path: string) {\r\n\t\treturn this.client.requests.execute<T>(path, this.requiresAuth);\r\n\t}\r\n}\r\n","import type { Client } from '../Client';\r\n\r\n/**\r\n * The base class which all other classes extend from.\r\n * @category Classes\r\n * @group Classes\r\n */\r\nexport class Base {\r\n\t/**\r\n\t * The instantiated hypixel.ts client.\r\n\t */\r\n\tprotected client: Client;\r\n\r\n\tpublic constructor(client: Client) {\r\n\t\tthis.client = client;\r\n\t}\r\n}\r\n","import { Base } from './Base';\r\nimport { Client } from '../Client';\r\nimport { APIPlayer } from '../typings';\r\n\r\nexport interface Player extends APIPlayer {}\r\n/**\r\n * The player class\r\n * @category Classes\r\n * @group Classes\r\n * @see {@link https://api.hypixel.net/#tag/Player-Data/paths/~1player/get}\r\n */\r\nexport class Player extends Base {\r\n\t/**\r\n\t * @param client Instantiated (and started) hypixel.ts client\r\n\t * @param data Player data received from API\r\n\t */\r\n\tpublic constructor(client: Client, data: APIPlayer) {\r\n\t\tsuper(client);\r\n\t\tObject.assign(this, data);\r\n\t}\r\n\r\n\t/**\r\n\t * Fetch the SkyBlock profiles of this player\r\n\t * @see {@link SkyBlockManager.fetchPlayerSkyBlockProfiles}\r\n\t */\r\n\tpublic async fetchSkyBlockProfiles() {\r\n\t\treturn this.client.skyblock.fetchPlayerSkyBlockProfiles(this.uuid);\r\n\t}\r\n}\r\n","type ErrorMessageSupplier = (...args: any[]) => string;\r\n\r\nconst messages = new Map<string, string | ErrorMessageSupplier>();\r\n\r\nexport class HypixelTSError extends Error {\r\n\tpublic constructor(key: string, ...args: any[]) {\r\n\t\tsuper(getMessage(key, args));\r\n\r\n\t\tfunction getMessage(key: string, args: any[]) {\r\n\t\t\tif (typeof key !== 'string') throw new Error('[getMessage]: argument key must be a string');\r\n\t\t\tconst msg = messages.get(key);\r\n\r\n\t\t\tif (!msg) throw new Error(`[getMessage]: An invalid error key was provided: ${key}`);\r\n\t\t\tif (typeof msg === 'function') return msg(...args);\r\n\t\t\tif (!args.length) return msg;\r\n\r\n\t\t\targs.unshift(msg);\r\n\t\t\treturn String(...args);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport function register(name: string, value: any) {\r\n\tmessages.set(name, typeof value === 'function' ? value : String(value));\r\n}\r\n","import { Base } from './Base';\r\nimport { HypixelTSError } from '../errors/HypixelTSError';\r\nimport type { GetUsernameResponse, GetUUIDResponse } from '../typings';\r\n\r\n/**\r\n * Utility functions\r\n * @category Classes\r\n * @group Classes\r\n */\r\nexport class Util extends Base {\r\n\t/**\r\n\t * Get the UUID of a player by providing their name\r\n\t * @param name The name of the player\r\n\t */\r\n\tpublic static async getUUID(name: string): Promise<string> {\r\n\t\ttry {\r\n\t\t\tconst data = await fetch(`https://api.mojang.com/users/profiles/minecraft/${name}`);\r\n\t\t\tconst json = (await data.json()) as GetUUIDResponse;\r\n\r\n\t\t\tif (json.errorMessage) throw new HypixelTSError('GET_UUID_ERROR', json.errorMessage, data.status);\r\n\t\t\treturn json.id;\r\n\t\t} catch {\r\n\t\t\tthrow new HypixelTSError('GET_UUID_404');\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Get player's name from their UUID\r\n\t * @param uuid The uuid of the player\r\n\t */\r\n\tpublic static async getUsername(uuid: string): Promise<string> {\r\n\t\tif (!this.isUUID(uuid)) {\r\n\t\t\tthrow new HypixelTSError('NOT_UUID');\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\tconst data = await fetch(`https://api.mojang.com/user/profile/${uuid}`);\r\n\t\t\tconst json = (await data.json()) as GetUsernameResponse;\r\n\r\n\t\t\tif (json.errorMessage) throw new HypixelTSError('GET_USERNAME_ERROR', json.errorMessage, data.status);\r\n\r\n\t\t\treturn json.name;\r\n\t\t} catch {\r\n\t\t\tthrow new HypixelTSError('GET_USERNAME_404');\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Check whether the provided UUID is a valid UUID or not\r\n\t * @param uuid The UUID to check\r\n\t */\r\n\tpublic static isUUID(uuid: string) {\r\n\t\tconst regexStripped = /^[0-9a-f]{32}$/i;\r\n\t\tconst regexFull = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-\\b[0-9a-f]{12}$/i;\r\n\t\treturn regexStripped.test(uuid) || regexFull.test(uuid);\r\n\t}\r\n}\r\n","import { register } from './HypixelTSError';\r\n\r\nconst messages = {\r\n\tCLIENT_OPTIONS_MISSING: (option?: string) => `ClientOptions${option ? `.${option}` : ''} ${option ? 'is' : 'are'} missing`,\r\n\tCLIENT_OPTION_INVALID_TYPE: (option: string, type: string, received?: string) =>\r\n\t\t`ClientOption.${option} is expected to be of type \"${type}\", received \"${received}\"`,\r\n\tGET_UUID_ERROR: (error: string, code: number) => `Util.getUUID: Failed with error ${error}, status code ${code}`,\r\n\tGET_UUID_404: `Util.getUUID: Player not found`,\r\n\tGET_USERNAME_ERROR: (error: string, code: number) => `Util.getUsername: Failed with error ${error}, status code ${code}`,\r\n\tGET_USERNAME_404: `Util.getUsername: Player not found`,\r\n\tNOT_UUID: `The supplied string was not of the correct format for a UUID`,\r\n\tMETHOD_MISSING_OPTION: (manager: string, method: string, option: string) => `${manager}.${method}: Required option \"${option}\" is missing`,\r\n\tMETHOD_INVALID_OPTIONS: (manager: string, method: string, option: string, expected: string[]) =>\r\n\t\t`${manager}.${method}: Invalid options provided. Expected type \"${\r\n\t\t\texpected?.length > 1 ? `either ${expected.join(', ')}` : expected.join(', ')\r\n\t\t}\" for the \"${option}\" option`\r\n};\r\n\r\nfor (const [key, value] of Object.entries(messages)) register(key, value);\r\n"],"mappings":"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","names":["key","args","messages"]}