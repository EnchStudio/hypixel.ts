{"version":3,"sources":["../../../../src/lib/managers/index.ts","../../../../src/lib/managers/BaseManager.ts","../../../../src/lib/errors/HypixelTSError.ts","../../../../src/lib/classes/Base.ts","../../../../src/lib/classes/Guild.ts","../../../../src/lib/managers/GuildManager.ts","../../../../src/lib/managers/OtherManager.ts","../../../../src/lib/classes/Player.ts","../../../../src/lib/classes/SkyBlockAuction.ts","../../../../src/lib/classes/SkyBlockProfile.ts","../../../../src/lib/classes/Util.ts","../../../../src/lib/errors/Messages.ts","../../../../src/lib/managers/PlayerManager.ts","../../../../src/lib/managers/ResourceManager.ts","../../../../src/lib/managers/SkyBlockManager.ts"],"sourcesContent":["export * from './BaseManager';\r\n\r\nexport * from './GuildManager';\r\nexport * from './OtherManager';\r\nexport * from './PlayerManager';\r\nexport * from './ResourceManager';\r\nexport * from './SkyBlockManager';\r\n","import type { Client } from '../Client';\r\n\r\n/**\r\n * The base manager which all other managers extend from\r\n * @category Managers\r\n * @group Managers\r\n */\r\nexport class BaseManager {\r\n\t/**\r\n\t * Whether or not the manager requires API key authorization.\r\n\t */\r\n\tprotected requiresAuth: boolean;\r\n\r\n\t/**\r\n\t * The instantiated hypixel.ts client\r\n\t */\r\n\tprotected client: Client;\r\n\r\n\tpublic constructor(client: Client, requiresAuth: boolean) {\r\n\t\tthis.client = client;\r\n\t\tthis.requiresAuth = requiresAuth;\r\n\t}\r\n\r\n\t/**\r\n\t * Calls the request manager to create (and execute) requests to the API.\r\n\t *\r\n\t * **NOTE**: Do not directly use this method unless you know what you are doing. Consider using the methods provided in the managers.\r\n\t * @param path The path/endpoint of the request\r\n\t * @private\r\n\t */\r\n\tprotected async makeGetRequest<T>(path: string) {\r\n\t\treturn this.client.requests.execute<T>(path, this.requiresAuth);\r\n\t}\r\n}\r\n","type ErrorMessageSupplier = (...args: any[]) => string;\r\n\r\nconst messages = new Map<string, string | ErrorMessageSupplier>();\r\n\r\nexport class HypixelTSError extends Error {\r\n\tpublic constructor(key: string, ...args: any[]) {\r\n\t\tsuper(getMessage(key, args));\r\n\r\n\t\tfunction getMessage(key: string, args: any[]) {\r\n\t\t\tif (typeof key !== 'string') throw new Error('[getMessage]: argument key must be a string');\r\n\t\t\tconst msg = messages.get(key);\r\n\r\n\t\t\tif (!msg) throw new Error(`[getMessage]: An invalid error key was provided: ${key}`);\r\n\t\t\tif (typeof msg === 'function') return msg(...args);\r\n\t\t\tif (!args.length) return msg;\r\n\r\n\t\t\targs.unshift(msg);\r\n\t\t\treturn String(...args);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport function register(name: string, value: any) {\r\n\tmessages.set(name, typeof value === 'function' ? value : String(value));\r\n}\r\n","import type { Client } from '../Client';\r\n\r\n/**\r\n * The base class which all other classes extend from.\r\n * @category Classes\r\n * @group Classes\r\n */\r\nexport class Base {\r\n\t/**\r\n\t * The instantiated hypixel.ts client.\r\n\t */\r\n\tprotected client: Client;\r\n\r\n\tpublic constructor(client: Client) {\r\n\t\tthis.client = client;\r\n\t}\r\n}\r\n","import { Base } from './Base';\r\nimport type { Client } from '../Client';\r\nimport type { APIGuild } from '../typings';\r\n\r\n/**\r\n * The guild class\r\n * @category Classes\r\n * @group Classes\r\n * @see {@link https://api.hypixel.net/#tag/Player-Data/paths/~1guild/get}\r\n */\r\nexport class Guild extends Base {\r\n\t/**\r\n\t * @param client Instantiated (and started) hypixel.ts client\r\n\t * @param data Guild data received from API\r\n\t */\r\n\tpublic constructor(client: Client, data: APIGuild) {\r\n\t\tsuper(client);\r\n\t\tdata.id = data._id;\r\n\t\tObject.assign(this, data);\r\n\t}\r\n}\r\n","import { BaseManager } from './BaseManager';\r\nimport { HypixelTSError } from '../errors/HypixelTSError';\r\nimport { Guild } from '../classes/Guild';\r\nimport type { APIGuild } from '../typings';\r\nimport type { Client } from '../Client';\r\n\r\n/**\r\n * Guild related endpoints\r\n * @category Managers\r\n * @group Managers\r\n */\r\nexport class GuildManager extends BaseManager {\r\n\tpublic constructor(client: Client) {\r\n\t\tsuper(client, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Fetch a guild by the guild id, or its name, or a player's guild by providing their uuid\r\n\t * @param identifier The id/name of the guild or the uuid of the player\r\n\t * @param type The type of identifier you're passing (id/name of guild, player uuid)\r\n\t */\r\n\tpublic async fetch(identifier: string, type: 'id' | 'name' | 'player') {\r\n\t\tif (!identifier) throw new HypixelTSError('METHOD_MISSING_OPTION', 'GuildManager', 'fetch', 'identifier');\r\n\t\tif (!type) throw new HypixelTSError('METHOD_MISSING_OPTION', 'GuildManager', 'fetch', 'type');\r\n\t\tif (type !== 'id' && type !== 'name' && type !== 'player')\r\n\t\t\tthrow new HypixelTSError('METHOD_INVALID_OPTIONS', 'GuildManager', 'fetch', 'type', ['id', 'name', 'player']);\r\n\r\n\t\tconst { guild } = await this.makeGetRequest<{ guild: APIGuild | null }>(`/guild?${type}=${identifier}`);\r\n\t\treturn guild ? new Guild(this.client, guild) : null;\r\n\t}\r\n}\r\n","import { BaseManager } from './BaseManager';\r\nimport { Client } from '../Client';\r\nimport type {\r\n\tActiveNetworkBoostersResponse,\r\n\tCurrentPlayerCountsResponse,\r\n\tCurrentLeaderboardsResponse,\r\n\tPunishmentStatisticsResponse\r\n} from '../typings';\r\n\r\n/**\r\n * Other endpoints\r\n * @category Managers\r\n * @group Managers\r\n * @see {@link https://api.hypixel.net/#tag/Other}\r\n */\r\nexport class OtherManager extends BaseManager {\r\n\tpublic constructor(client: Client) {\r\n\t\tsuper(client, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Fetch all active network boosters\r\n\t */\r\n\tpublic async fetchActiveNetworkBoosters(): Promise<ActiveNetworkBoostersResponse> {\r\n\t\tconst data = await this.makeGetRequest<ActiveNetworkBoostersResponse>('/boosters');\r\n\t\treturn {\r\n\t\t\tboosters: data.boosters,\r\n\t\t\tboosterState: data.boosterState\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Fetch current player counts across all games\r\n\t */\r\n\tpublic async fetchCurrentPlayerCounts(): Promise<CurrentPlayerCountsResponse> {\r\n\t\tconst data = await this.makeGetRequest<CurrentPlayerCountsResponse>('/counts');\r\n\t\treturn {\r\n\t\t\tplayerCount: data.playerCount,\r\n\t\t\tgames: data.games\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Fetch current leaderboards\r\n\t */\r\n\tpublic async fetchCurrentLeaderboards(): Promise<CurrentLeaderboardsResponse> {\r\n\t\tconst data = await this.makeGetRequest<CurrentLeaderboardsResponse>('/leaderboards');\r\n\t\treturn {\r\n\t\t\tleaderboards: data.leaderboards\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Fetch punishment statistics\r\n\t */\r\n\tpublic async fetchPunishmentStatistics(): Promise<PunishmentStatisticsResponse> {\r\n\t\tconst data = await this.makeGetRequest<PunishmentStatisticsResponse>('/punishmentstats');\r\n\t\treturn {\r\n\t\t\twatchdog_lastMinute: data.watchdog_lastMinute,\r\n\t\t\tstaff_rollingDaily: data.staff_rollingDaily,\r\n\t\t\twatchdog_total: data.watchdog_total,\r\n\t\t\twatchdog_rollingDaily: data.watchdog_rollingDaily,\r\n\t\t\tstaff_total: data.staff_total\r\n\t\t};\r\n\t}\r\n}\r\n","import { Base } from './Base';\r\nimport { Client } from '../Client';\r\nimport { APIPlayer } from '../typings';\r\n\r\nexport interface Player extends APIPlayer {}\r\n/**\r\n * The player class\r\n * @category Classes\r\n * @group Classes\r\n * @see {@link https://api.hypixel.net/#tag/Player-Data/paths/~1player/get}\r\n */\r\nexport class Player extends Base {\r\n\t/**\r\n\t * @param client Instantiated (and started) hypixel.ts client\r\n\t * @param data Player data received from API\r\n\t */\r\n\tpublic constructor(client: Client, data: APIPlayer) {\r\n\t\tsuper(client);\r\n\t\tObject.assign(this, data);\r\n\t}\r\n\r\n\t/**\r\n\t * Fetch the SkyBlock profiles of this player\r\n\t * @see {@link SkyBlockManager.fetchPlayerSkyBlockProfiles}\r\n\t */\r\n\tpublic async fetchSkyBlockProfiles() {\r\n\t\treturn this.client.skyblock.fetchPlayerSkyBlockProfiles(this.uuid);\r\n\t}\r\n}\r\n","import { Base } from './Base';\r\nimport type { Client } from '../Client';\r\nimport type { APISkyBlockAuction } from '../typings';\r\n\r\nexport interface SkyBlockAuction extends APISkyBlockAuction {}\r\n/**\r\n * The sky block auction class\r\n * @category Classes\r\n * @group Classes\r\n * @see {@link https://api.hypixel.net/#tag/SkyBlock/paths/~1skyblock~1auction/get}\r\n */\r\nexport class SkyBlockAuction extends Base {\r\n\t/**\r\n\t * @param client Instantiated (and started) hypixel.ts client\r\n\t * @param data SkyBlock auction data received from API\r\n\t */\r\n\tpublic constructor(client: Client, data: APISkyBlockAuction) {\r\n\t\tsuper(client);\r\n\t\tif ('_id' in data) data.id = data._id;\r\n\t\tObject.assign(this, data);\r\n\t}\r\n}\r\n","import { Base } from './Base';\r\nimport type { Client } from '../Client';\r\nimport type { APISkyBlockProfile } from '../typings';\r\n\r\nexport interface SkyBlockProfile extends APISkyBlockProfile {}\r\n/**\r\n * The SkyBlockProfile class.\r\n * @category Classes\r\n * @Group Classes\r\n * @see {@link https://api.hypixel.net/#tag/SkyBlock/paths/~1skyblock~1profile/get}\r\n */\r\nexport class SkyBlockProfile extends Base {\r\n\t/**\r\n\t * @param client Instantiated (and started) hypixel.ts client\r\n\t * @param data SkyBlock profile data received from API\r\n\t */\r\n\tpublic constructor(client: Client, data: APISkyBlockProfile) {\r\n\t\tsuper(client);\r\n\t\tObject.assign(this, data);\r\n\t}\r\n}\r\n","import { Base } from './Base';\r\nimport { HypixelTSError } from '../errors/HypixelTSError';\r\nimport type { GetUsernameResponse, GetUUIDResponse } from '../typings';\r\n\r\n/**\r\n * Utility functions\r\n * @category Classes\r\n * @group Classes\r\n */\r\nexport class Util extends Base {\r\n\t/**\r\n\t * Get the UUID of a player by providing their name\r\n\t * @param name The name of the player\r\n\t */\r\n\tpublic static async getUUID(name: string): Promise<string> {\r\n\t\ttry {\r\n\t\t\tconst data = await fetch(`https://api.mojang.com/users/profiles/minecraft/${name}`);\r\n\t\t\tconst json = (await data.json()) as GetUUIDResponse;\r\n\r\n\t\t\tif (json.errorMessage) throw new HypixelTSError('GET_UUID_ERROR', json.errorMessage, data.status);\r\n\t\t\treturn json.id;\r\n\t\t} catch {\r\n\t\t\tthrow new HypixelTSError('GET_UUID_404');\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Get player's name from their UUID\r\n\t * @param uuid The uuid of the player\r\n\t */\r\n\tpublic static async getUsername(uuid: string): Promise<string> {\r\n\t\tif (!this.isUUID(uuid)) {\r\n\t\t\tthrow new HypixelTSError('NOT_UUID');\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\tconst data = await fetch(`https://api.mojang.com/user/profile/${uuid}`);\r\n\t\t\tconst json = (await data.json()) as GetUsernameResponse;\r\n\r\n\t\t\tif (json.errorMessage) throw new HypixelTSError('GET_USERNAME_ERROR', json.errorMessage, data.status);\r\n\r\n\t\t\treturn json.name;\r\n\t\t} catch {\r\n\t\t\tthrow new HypixelTSError('GET_USERNAME_404');\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Check whether the provided UUID is a valid UUID or not\r\n\t * @param uuid The UUID to check\r\n\t */\r\n\tpublic static isUUID(uuid: string) {\r\n\t\tconst regexStripped = /^[0-9a-f]{32}$/i;\r\n\t\tconst regexFull = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-\\b[0-9a-f]{12}$/i;\r\n\t\treturn regexStripped.test(uuid) || regexFull.test(uuid);\r\n\t}\r\n}\r\n","import { register } from './HypixelTSError';\r\n\r\nconst messages = {\r\n\tCLIENT_OPTIONS_MISSING: (option?: string) => `ClientOptions${option ? `.${option}` : ''} ${option ? 'is' : 'are'} missing`,\r\n\tCLIENT_OPTION_INVALID_TYPE: (option: string, type: string, received?: string) =>\r\n\t\t`ClientOption.${option} is expected to be of type \"${type}\", received \"${received}\"`,\r\n\tGET_UUID_ERROR: (error: string, code: number) => `Util.getUUID: Failed with error ${error}, status code ${code}`,\r\n\tGET_UUID_404: `Util.getUUID: Player not found`,\r\n\tGET_USERNAME_ERROR: (error: string, code: number) => `Util.getUsername: Failed with error ${error}, status code ${code}`,\r\n\tGET_USERNAME_404: `Util.getUsername: Player not found`,\r\n\tNOT_UUID: `The supplied string was not of the correct format for a UUID`,\r\n\tMETHOD_MISSING_OPTION: (manager: string, method: string, option: string) => `${manager}.${method}: Required option \"${option}\" is missing`,\r\n\tMETHOD_INVALID_OPTIONS: (manager: string, method: string, option: string, expected: string[]) =>\r\n\t\t`${manager}.${method}: Invalid options provided. Expected type \"${\r\n\t\t\texpected?.length > 1 ? `either ${expected.join(', ')}` : expected.join(', ')\r\n\t\t}\" for the \"${option}\" option`\r\n};\r\n\r\nfor (const [key, value] of Object.entries(messages)) register(key, value);\r\n","import { BaseManager } from './BaseManager';\r\nimport { Client } from '../Client';\r\nimport { Player, Util } from '../classes/index';\r\nimport { HypixelTSError } from '../errors/index';\r\nimport type { APIPlayer, GetRecentlyPlayedGamesResponse, GetStatusResponse } from '../typings';\r\n\r\n/**\r\n * Player related endpoints.\r\n * @category Managers\r\n * @group Managers\r\n */\r\nexport class PlayerManager extends BaseManager {\r\n\tpublic constructor(client: Client) {\r\n\t\tsuper(client, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Fetch a player using their username or uuid\r\n\t * @param identifier The username/uuid of the player\r\n\t */\r\n\tpublic async fetch(identifier: string) {\r\n\t\tif (!identifier) throw new HypixelTSError('METHOD_MISSING_OPTION', 'PlayerManager', 'fetch', 'identifier');\r\n\r\n\t\tconst uuid = await this.getUUID(identifier);\r\n\t\tconst { player } = await this.makeGetRequest<{ player: APIPlayer }>(`/player?uuid=${uuid}`);\r\n\t\treturn new Player(this.client, player);\r\n\t}\r\n\r\n\t/**\r\n\t * Fetch the recently played games of a player\r\n\t * @param identifier The username/uuid of the player\r\n\t */\r\n\tpublic async getRecentlyPlayedGames(identifier: string) {\r\n\t\tif (!identifier) throw new HypixelTSError('METHOD_MISSING_OPTION', 'PlayerManager', 'getRecentlyPlayedGames', 'identifier');\r\n\r\n\t\tconst uuid = await this.getUUID(identifier);\r\n\t\tconst { games } = await this.makeGetRequest<{ games: GetRecentlyPlayedGamesResponse[] }>(`/recentgames?uuid=${uuid}`);\r\n\t\treturn games;\r\n\t}\r\n\r\n\t/**\r\n\t * Fetch the status of a player\r\n\t * @param identifier The username/uuid of the player\r\n\t */\r\n\tpublic async getStatus(identifier: string) {\r\n\t\tif (!identifier) throw new HypixelTSError('METHOD_MISSING_OPTION', 'PlayerManager', 'getStatus', 'identifier');\r\n\r\n\t\tconst uuid = await this.getUUID(identifier);\r\n\t\tconst { session } = await this.makeGetRequest<{ session: GetStatusResponse }>(`/status?uuid=${uuid}`);\r\n\t\treturn session;\r\n\t}\r\n\r\n\t/**\r\n\t * Resolves the username to a uuid for use in requests\r\n\t * @param identifier The username (or uuid) of the player\r\n\t */\r\n\tprivate async getUUID(identifier: string) {\r\n\t\tconst isUUID = Util.isUUID(identifier);\r\n\r\n\t\tif (!isUUID) {\r\n\t\t\tconst uuid = await Util.getUUID(identifier);\r\n\t\t\treturn uuid;\r\n\t\t}\r\n\r\n\t\treturn identifier;\r\n\t}\r\n}\r\n","import { BaseManager } from './BaseManager';\r\nimport type { Client } from '../Client';\r\nimport type {\r\n\tVanityPetsResponse,\r\n\tAchievementsResponse,\r\n\tChallengesResponse,\r\n\tGameInformationResponse,\r\n\tGuildAchievementsResponse,\r\n\tQuestsResponse,\r\n\tVanityCompanionsResponse\r\n} from '../typings';\r\n\r\n/**\r\n * Resource endpoints.\r\n *\r\n * **Note**: API Key authorization is not required to use this manager.\r\n *\r\n * @category Managers\r\n * @group Managers\r\n */\r\nexport class ResourceManager extends BaseManager {\r\n\tpublic constructor(client: Client) {\r\n\t\tsuper(client, false);\r\n\t}\r\n\r\n\t/**\r\n\t * Fetch information about Hypixel games\r\n\t */\r\n\tpublic async fetchGameInformation() {\r\n\t\treturn this.makeGetRequest<GameInformationResponse>('/resources/games');\r\n\t}\r\n\r\n\t/**\r\n\t * Fetch all achievements\r\n\t */\r\n\tpublic async fetchAchievements() {\r\n\t\treturn this.makeGetRequest<AchievementsResponse>('/resources/achievements');\r\n\t}\r\n\r\n\t/**\r\n\t * Fetch all challenges\r\n\t */\r\n\tpublic async fetchChallenges() {\r\n\t\treturn this.makeGetRequest<ChallengesResponse>('/resources/challenges');\r\n\t}\r\n\r\n\t/**\r\n\t * Fetch all quests\r\n\t */\r\n\tpublic async fetchQuests() {\r\n\t\treturn this.makeGetRequest<QuestsResponse>('/resources/quests');\r\n\t}\r\n\r\n\t/**\r\n\t * Fetch all guild achievements\r\n\t */\r\n\tpublic async fetchGuildAchievements() {\r\n\t\treturn this.makeGetRequest<GuildAchievementsResponse>('/resources/guilds/achievements');\r\n\t}\r\n\r\n\t/**\r\n\t * Fetch all vanity pets\r\n\t */\r\n\tpublic async fetchVanityPets() {\r\n\t\treturn this.makeGetRequest<VanityPetsResponse>('/resources/vanity/pets');\r\n\t}\r\n\r\n\t/**\r\n\t * Fetch all vanity companions\r\n\t */\r\n\tpublic async fetchVanityCompanions() {\r\n\t\treturn this.makeGetRequest<VanityCompanionsResponse>('/resources/vanity/companions');\r\n\t}\r\n}\r\n","import { BaseManager } from './BaseManager';\r\nimport { HypixelTSError } from '../errors/index';\r\nimport { SkyBlockProfile, SkyBlockAuction } from '../classes/index';\r\nimport type { Client } from '../Client';\r\nimport type {\r\n\tAPISkyBlockProfile,\r\n\tFetchCollectionsResponse,\r\n\tFetchSkillsResponse,\r\n\tFetchItemsResponse,\r\n\tFetchElectionAndMayorResponse,\r\n\tFetchActiveBingoGoalsResponse,\r\n\tFetchNewsResponse,\r\n\tAPISkyBlockAuction,\r\n\tFetchActiveAuctionsResponse,\r\n\tFetchBazaarResponse,\r\n\tRecentlyEndedAuctionsResponse,\r\n\tFetchBingoDataResponse,\r\n\tFetchFireSalesResponse,\r\n\tFetchFireSalesResponseFireSale\r\n} from '../typings';\r\n\r\n/**\r\n * Skyblock related endpoints\r\n * @category Managers\r\n * @group Managers\r\n * @see {@link https://api.hypixel.net/#tag/SkyBlock}\r\n */\r\nexport class SkyBlockManager extends BaseManager {\r\n\tpublic constructor(client: Client) {\r\n\t\tsuper(client, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Fetch information regarding collections in the SkyBlock game\r\n\t */\r\n\tpublic async fetchCollections(): Promise<FetchCollectionsResponse> {\r\n\t\tconst data = await this.makeGetRequest<FetchCollectionsResponse>('/resources/skyblock/collections');\r\n\t\treturn {\r\n\t\t\tlastUpdated: data.lastUpdated,\r\n\t\t\tversion: data.version,\r\n\t\t\tcollections: data.collections\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Fetch information regarding skills in the SkyBlock game\r\n\t */\r\n\tpublic async fetchSkills(): Promise<FetchSkillsResponse> {\r\n\t\tconst data = await this.makeGetRequest<FetchSkillsResponse>('/resources/skyblock/skills');\r\n\t\treturn {\r\n\t\t\tlastUpdated: data.lastUpdated,\r\n\t\t\tversion: data.version,\r\n\t\t\tcollections: data.collections,\r\n\t\t\tskills: data.skills\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Fetch information regarding items in the SkyBlock game\r\n\t */\r\n\tpublic async fetchItems(): Promise<FetchItemsResponse> {\r\n\t\tconst data = await this.makeGetRequest<FetchItemsResponse>('/resources/skyblock/items');\r\n\t\treturn {\r\n\t\t\tlastUpdated: data.lastUpdated,\r\n\t\t\titems: data.items\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Fetch information regarding the current mayor and ongoing election in SkyBlock\r\n\t */\r\n\tpublic async fetchElectionAndMayor(): Promise<FetchElectionAndMayorResponse> {\r\n\t\tconst data = await this.makeGetRequest<FetchElectionAndMayorResponse>('/resources/skyblock/election');\r\n\t\treturn {\r\n\t\t\tlastUpdated: data.lastUpdated,\r\n\t\t\tmayor: data.mayor,\r\n\t\t\tcurrent: data.current\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Fetch information regarding the current bingo event and its goals\r\n\t */\r\n\tpublic async fetchActiveBingoGoals(): Promise<FetchActiveBingoGoalsResponse> {\r\n\t\tconst data = await this.makeGetRequest<FetchActiveBingoGoalsResponse>('/resources/skyblock/bingo');\r\n\t\treturn {\r\n\t\t\tlastUpdated: data.lastUpdated,\r\n\t\t\tid: data.id,\r\n\t\t\tgoals: data.goals\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Fetch SkyBlock news\r\n\t */\r\n\tpublic async fetchNews() {\r\n\t\tconst data = await this.makeGetRequest<FetchNewsResponse>('/skyblock/news');\r\n\t\treturn {\r\n\t\t\titems: data.items\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Fetch a SkyBlock auction.\r\n\t * @param identifier The idenitifer you're using to fetch the auction\r\n\t * @param type The type of identifier you're passing (either auction `uuid`, uuid of the `player`, uuid of the `profile`)\r\n\t * @param raw Whether to return the raw response, without converting each auction to an @see{@link SkyBlockAuction} class. Defaults to `false`.\r\n\t */\r\n\tpublic async fetchAuction(\r\n\t\tidentifier: string,\r\n\t\ttype: 'uuid' | 'player' | 'profile',\r\n\t\traw = false\r\n\t): Promise<SkyBlockAuction[] | APISkyBlockAuction[]> {\r\n\t\tif (!identifier) throw new HypixelTSError('METHOD_MISSING_OPTION', 'SkyBlockManager', 'fetchAuction', 'identifier');\r\n\t\tif (!type) throw new HypixelTSError('METHOD_MISSING_OPTION', 'SkyBlockManager', 'fetchAuction', 'type');\r\n\t\tif (type !== 'uuid' && type !== 'player' && type !== 'profile')\r\n\t\t\tthrow new HypixelTSError('METHOD_INVALID_OPTIONS', 'SkyBlockManager', 'fetchAuction', 'type', ['uuid', 'player', 'profile']);\r\n\r\n\t\tconst { auctions } = await this.makeGetRequest<{ auctions: APISkyBlockAuction[] }>(`/skyblock/auction?${type}=${identifier}`);\r\n\r\n\t\tif (!raw) {\r\n\t\t\tconst parsed = [];\r\n\r\n\t\t\tfor (const auction of auctions) {\r\n\t\t\t\tparsed.push(new SkyBlockAuction(this.client, auction));\r\n\t\t\t}\r\n\r\n\t\t\treturn parsed;\r\n\t\t}\r\n\r\n\t\treturn auctions;\r\n\t}\r\n\r\n\t/**\r\n\t * Fetch the currently active auctions (sorted by last updated first and paginated)\r\n\t * @param page The page number\r\n\t * @param resolveAuctions Whether to resolve the auctions returned, to a @see {@link SkyBlockAuction} class. Defaults to `true`.\r\n\t */\r\n\tpublic async fetchActiveAuctions(page?: number, resolveAuctions = true) {\r\n\t\tif (page && typeof page !== 'number')\r\n\t\t\tthrow new HypixelTSError('METHOD_INVALID_OPTIONS', 'SkyBlockManager', 'fetchActiveAuctions', 'page', ['number']);\r\n\r\n\t\tconst data = await this.makeGetRequest<FetchActiveAuctionsResponse>(`/skyblock/auctions${page ? '?page=' + page : ''}`);\r\n\r\n\t\tif (resolveAuctions) {\r\n\t\t\tconst parsed = [];\r\n\r\n\t\t\tfor (const auction of data.auctions) {\r\n\t\t\t\tparsed.push(new SkyBlockAuction(this.client, auction));\r\n\t\t\t}\r\n\r\n\t\t\treturn {\r\n\t\t\t\tlastUpdated: data.lastUpdated,\r\n\t\t\t\tpage: data.page,\r\n\t\t\t\ttotalPages: data.totalPages,\r\n\t\t\t\ttotalAuctions: data.totalAuctions,\r\n\t\t\t\tauctions: parsed\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tlastUpdated: data.lastUpdated,\r\n\t\t\tpage: data.page,\r\n\t\t\ttotalPages: data.totalPages,\r\n\t\t\ttotalAuctions: data.totalAuctions,\r\n\t\t\tauctions: data.auctions\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Fetch recently ended auctions (auctions which ended in the last 60 seconds).\r\n\t */\r\n\tpublic async fetchRecentlyEndedAuctions(): Promise<RecentlyEndedAuctionsResponse> {\r\n\t\tconst data = await this.makeGetRequest<RecentlyEndedAuctionsResponse>('/skyblock/auctions_ended');\r\n\t\treturn {\r\n\t\t\tlastUpdated: data.lastUpdated,\r\n\t\t\tauctions: data.auctions\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Fetch bazaar items\r\n\t */\r\n\tpublic async fetchBazaar(): Promise<FetchBazaarResponse> {\r\n\t\tconst data = await this.makeGetRequest<FetchBazaarResponse>('/skyblock/bazaar');\r\n\t\treturn {\r\n\t\t\tlastUpdated: data.lastUpdated,\r\n\t\t\tproducts: data.products\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Fetch a SkyBlock profile (using a SkyBlock profile uuid). The data returned can differ depending on the players in-game API settings.\r\n\t * @param profileUuid The uuid of the SkyBlock profile\r\n\t */\r\n\tpublic async fetchProfile(profileUuid: string): Promise<SkyBlockProfile> {\r\n\t\tif (!profileUuid) throw new HypixelTSError('METHOD_MISSING_OPTION', 'SkyBlockManager', 'fetchProfile', 'profileUuid');\r\n\r\n\t\tconst data = await this.makeGetRequest<APISkyBlockProfile>(`/skyblock/profile?profile=${profileUuid}`);\r\n\r\n\t\treturn new SkyBlockProfile(this.client, data);\r\n\t}\r\n\r\n\t/**\r\n\t * Fetch a SkyBlock profiles of a player\r\n\t * @param playerUuid The uuid of the player\r\n\t */\r\n\tpublic async fetchPlayerSkyBlockProfiles(playerUuid: string): Promise<SkyBlockProfile[]> {\r\n\t\tif (!playerUuid) throw new HypixelTSError('METHOD_MISSING_OPTION', 'SkyBlockManager', 'fetchPlayerSkyBlockProfiles', 'playerUuid');\r\n\r\n\t\tconst { profiles } = await this.makeGetRequest<{ profiles: APISkyBlockProfile[] }>(`/skyblock/profiles?uuid=${playerUuid}`);\r\n\t\tconst parsed = [];\r\n\r\n\t\tfor (const profile of profiles) {\r\n\t\t\tparsed.push(new SkyBlockProfile(this.client, profile));\r\n\t\t}\r\n\r\n\t\treturn parsed;\r\n\t}\r\n\r\n\t/**\r\n\t * Fetch bingo data of a player\r\n\t * @param playerUuid The uuid of the player\r\n\t */\r\n\tpublic async fetchBingoData(playerUuid: string): Promise<FetchBingoDataResponse> {\r\n\t\tif (!playerUuid) throw new HypixelTSError('METHOD_MISSING_OPTION', 'SkyBlockManager', 'fetchBingoData', 'playerUuid');\r\n\r\n\t\tconst data = await this.makeGetRequest<FetchBingoDataResponse>(`/skyblock/bingo?uuid=${playerUuid}`);\r\n\t\treturn {\r\n\t\t\tevents: data.events\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Fetch the currently active or upcoming Fire Sales for SkyBlock\r\n\t */\r\n\tpublic async fetchFireSales(): Promise<FetchFireSalesResponseFireSale[]> {\r\n\t\tconst { sales } = await this.makeGetRequest<FetchFireSalesResponse>('/skyblock/firesales');\r\n\t\treturn sales;\r\n\t}\r\n}\r\n"],"mappings":"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","names":["key","args","messages"]}