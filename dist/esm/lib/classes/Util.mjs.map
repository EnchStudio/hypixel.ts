{"version":3,"sources":["../../../../src/lib/classes/Util.ts"],"sourcesContent":["import { Base } from './Base';\r\nimport { HypixelTSError } from '../errors/HypixelTSError';\r\nimport type { GetUsernameResponse, GetUUIDResponse } from '../typings';\r\n\r\n/**\r\n * Utility functions\r\n * @category Classes\r\n * @group Classes\r\n */\r\nexport class Util extends Base {\r\n\t/**\r\n\t * Get the UUID of a player by providing their name\r\n\t * @param name The name of the player\r\n\t */\r\n\tpublic static async getUUID(name: string): Promise<string> {\r\n\t\ttry {\r\n\t\t\tconst data = await fetch(`https://api.mojang.com/users/profiles/minecraft/${name}`);\r\n\t\t\tconst json = (await data.json()) as GetUUIDResponse;\r\n\r\n\t\t\tif (json.errorMessage) throw new HypixelTSError('GET_UUID_ERROR', json.errorMessage, data.status);\r\n\t\t\treturn json.id;\r\n\t\t} catch {\r\n\t\t\tthrow new HypixelTSError('GET_UUID_404');\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Get player's name from their UUID\r\n\t * @param uuid The uuid of the player\r\n\t */\r\n\tpublic static async getUsername(uuid: string): Promise<string> {\r\n\t\tif (!this.isUUID(uuid)) {\r\n\t\t\tthrow new HypixelTSError('NOT_UUID');\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\tconst data = await fetch(`https://api.mojang.com/user/profile/${uuid}`);\r\n\t\t\tconst json = (await data.json()) as GetUsernameResponse;\r\n\r\n\t\t\tif (json.errorMessage) throw new HypixelTSError('GET_USERNAME_ERROR', json.errorMessage, data.status);\r\n\r\n\t\t\treturn json.name;\r\n\t\t} catch {\r\n\t\t\tthrow new HypixelTSError('GET_USERNAME_404');\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Check whether the provided UUID is a valid UUID or not\r\n\t * @param uuid The UUID to check\r\n\t */\r\n\tpublic static isUUID(uuid: string) {\r\n\t\tconst regexStripped = /^[0-9a-f]{32}$/i;\r\n\t\tconst regexFull = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-\\b[0-9a-f]{12}$/i;\r\n\t\treturn regexStripped.test(uuid) || regexFull.test(uuid);\r\n\t}\r\n}\r\n"],"mappings":";;;;AAAA,SAAS,YAAY;AACrB,SAAS,sBAAsB;AAQxB,IAAM,OAAN,cAAmB,KAAK;AAAA,EAT/B,OAS+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAK9B,aAAoB,QAAQ,MAA+B;AAC1D,QAAI;AACH,YAAM,OAAO,MAAM,MAAM,mDAAmD,IAAI,EAAE;AAClF,YAAM,OAAQ,MAAM,KAAK,KAAK;AAE9B,UAAI,KAAK;AAAc,cAAM,IAAI,eAAe,kBAAkB,KAAK,cAAc,KAAK,MAAM;AAChG,aAAO,KAAK;AAAA,IACb,QAAQ;AACP,YAAM,IAAI,eAAe,cAAc;AAAA,IACxC;AAAA,EACD;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,aAAoB,YAAY,MAA+B;AAC9D,QAAI,CAAC,KAAK,OAAO,IAAI,GAAG;AACvB,YAAM,IAAI,eAAe,UAAU;AAAA,IACpC;AAEA,QAAI;AACH,YAAM,OAAO,MAAM,MAAM,uCAAuC,IAAI,EAAE;AACtE,YAAM,OAAQ,MAAM,KAAK,KAAK;AAE9B,UAAI,KAAK;AAAc,cAAM,IAAI,eAAe,sBAAsB,KAAK,cAAc,KAAK,MAAM;AAEpG,aAAO,KAAK;AAAA,IACb,QAAQ;AACP,YAAM,IAAI,eAAe,kBAAkB;AAAA,IAC5C;AAAA,EACD;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,OAAc,OAAO,MAAc;AAClC,UAAM,gBAAgB;AACtB,UAAM,YAAY;AAClB,WAAO,cAAc,KAAK,IAAI,KAAK,UAAU,KAAK,IAAI;AAAA,EACvD;AACD;","names":[]}