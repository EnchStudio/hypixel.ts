{"version":3,"sources":["../../../../src/lib/rest/ApiRequest.ts"],"sourcesContent":["import { RequestManager, HypixelAPIError, type HypixelAPIErrorResponse } from './index';\r\nimport { HypixelTSError } from '../errors/index';\r\n\r\n/**\r\n * The options supplied to the request\r\n * @category Rest\r\n * @group Rest\r\n */\r\nexport interface ApiRequestOptions {\r\n\t/**\r\n\t * The request path/endpoint\r\n\t */\r\n\tpath: string;\r\n\r\n\t/**\r\n\t * The request method, only `GET` is supported\r\n\t */\r\n\tmethod?: 'GET';\r\n\r\n\t/**\r\n\t * Whether to send the API key for this request\r\n\t */\r\n\tsendAPIKey?: boolean;\r\n}\r\n\r\n/**\r\n * Handles (sending/building options) requests\r\n * @category Rest\r\n * @group Rest\r\n */\r\nexport class ApiRequest {\r\n\t/**\r\n\t * The request manager instance\r\n\t */\r\n\tpublic requests: RequestManager;\r\n\r\n\t/**\r\n\t * The options of this request\r\n\t */\r\n\tpublic options: ApiRequestOptions;\r\n\r\n\tpublic constructor(requestManager: RequestManager, options: ApiRequestOptions) {\r\n\t\tthis.requests = requestManager;\r\n\t\tthis.options = options;\r\n\t}\r\n\r\n\t/**\r\n\t * Makes a request with the options provided.\r\n\t */\r\n\tpublic async make() {\r\n\t\tconst options = this.buildOptions();\r\n\r\n\t\tconst res = await fetch(options.url, {\r\n\t\t\t...options\r\n\t\t});\r\n\r\n\t\tif (!res.ok) {\r\n\t\t\tconst error = (await res.json()) as HypixelAPIErrorResponse;\r\n\t\t\tthrow new HypixelAPIError(error?.cause ?? res.statusText, res.status);\r\n\t\t}\r\n\r\n\t\treturn res;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates an object containing the options to be passed to the request\r\n\t */\r\n\tpublic buildOptions() {\r\n\t\tconst apiKey = this.requests.client.options?.apiKey;\r\n\r\n\t\tconst headers: Record<string, string> = {\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t};\r\n\r\n\t\tif (this.options.sendAPIKey) {\r\n\t\t\tif (!apiKey) throw new HypixelTSError('CLIENT_OPTIONS_MISSING', 'apiKey');\r\n\t\t\theaders['API-Key'] = apiKey;\r\n\t\t}\r\n\r\n\t\tconst options = {\r\n\t\t\turl: `${this.requests.baseApiUrl}${this.options.path}`,\r\n\t\t\tmethod: this.options.method ?? 'GET',\r\n\t\t\theaders\r\n\t\t};\r\n\r\n\t\treturn options;\r\n\t}\r\n}\r\n"],"mappings":";;;;AAAA,SAAyB,uBAAqD;AAC9E,SAAS,sBAAsB;AA6BxB,IAAM,aAAN,MAAiB;AAAA,EA9BxB,OA8BwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAIhB;AAAA;AAAA;AAAA;AAAA,EAKA;AAAA,EAEA,YAAY,gBAAgC,SAA4B;AAC9E,SAAK,WAAW;AAChB,SAAK,UAAU;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA,EAKA,MAAa,OAAO;AACnB,UAAM,UAAU,KAAK,aAAa;AAElC,UAAM,MAAM,MAAM,MAAM,QAAQ,KAAK;AAAA,MACpC,GAAG;AAAA,IACJ,CAAC;AAED,QAAI,CAAC,IAAI,IAAI;AACZ,YAAM,QAAS,MAAM,IAAI,KAAK;AAC9B,YAAM,IAAI,gBAAgB,OAAO,SAAS,IAAI,YAAY,IAAI,MAAM;AAAA,IACrE;AAEA,WAAO;AAAA,EACR;AAAA;AAAA;AAAA;AAAA,EAKO,eAAe;AACrB,UAAM,SAAS,KAAK,SAAS,OAAO,SAAS;AAE7C,UAAM,UAAkC;AAAA,MACvC,gBAAgB;AAAA,IACjB;AAEA,QAAI,KAAK,QAAQ,YAAY;AAC5B,UAAI,CAAC;AAAQ,cAAM,IAAI,eAAe,0BAA0B,QAAQ;AACxE,cAAQ,SAAS,IAAI;AAAA,IACtB;AAEA,UAAM,UAAU;AAAA,MACf,KAAK,GAAG,KAAK,SAAS,UAAU,GAAG,KAAK,QAAQ,IAAI;AAAA,MACpD,QAAQ,KAAK,QAAQ,UAAU;AAAA,MAC/B;AAAA,IACD;AAEA,WAAO;AAAA,EACR;AACD;","names":[]}